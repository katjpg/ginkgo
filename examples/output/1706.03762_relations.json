[
  {
    "head": "Recurrent neural networks",
    "head_type": "method",
    "tail": "sequence modeling",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'; using 'as'",
    "reasoning": "The text states that Recurrent neural networks are established as approaches in sequence modeling, indicating that RNNs are used for the task of sequence modeling."
  },
  {
    "head": "Recurrent neural networks",
    "head_type": "method",
    "tail": "transduction problems",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'",
    "reasoning": "The text states that Recurrent neural networks have been established as approaches for 'sequence modeling and transduction problems', indicating they are used for these tasks."
  },
  {
    "head": "Recurrent neural networks",
    "head_type": "method",
    "tail": "language modeling",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'",
    "reasoning": "The text states that Recurrent neural networks have been established as approaches in sequence modeling and transduction problems such as language modeling, indicating that Recurrent neural networks are used for language modeling."
  },
  {
    "head": "long short-term memory",
    "head_type": "method",
    "tail": "gated recurrent",
    "tail_type": "method",
    "relation": "compared_with",
    "confidence": "LOW",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'",
    "reasoning": "The text mentions both 'long short-term memory' and 'gated recurrent' neural networks in the context of sequence modeling, implying they are comparable approaches. However, there is no direct comparison of their performance or a statement of one improving upon the other. The relation is inferred from their co-occurrence as established state-of-the-art approaches."
  },
  {
    "head": "long short-term memory",
    "head_type": "method",
    "tail": "sequence modeling",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'; using 'as'",
    "reasoning": "The text states that long short-term memory networks have been established as state-of-the-art approaches in sequence modeling, indicating that LSTM is used for this task."
  },
  {
    "head": "long short-term memory",
    "head_type": "method",
    "tail": "transduction problems",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'",
    "reasoning": "The text states that long short-term memory networks have been established as state-of-the-art approaches for transduction problems, indicating that LSTM is used for solving these problems."
  },
  {
    "head": "long short-term memory",
    "head_type": "method",
    "tail": "language modeling",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'",
    "reasoning": "The text states that long short-term memory networks have been established as state-of-the-art approaches in sequence modeling problems such as language modeling, indicating that LSTM is used for language modeling."
  },
  {
    "head": "long short-term memory",
    "head_type": "method",
    "tail": "machine translation",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'",
    "reasoning": "The text states that long short-term memory networks have been established as state-of-the-art approaches in sequence modeling and transduction problems such as machine translation. This indicates that LSTM is used for the task of machine translation."
  },
  {
    "head": "gated recurrent",
    "head_type": "method",
    "tail": "sequence modeling",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'; using 'as'",
    "reasoning": "The text states that gated recurrent neural networks have been established as state-of-the-art approaches in sequence modeling, indicating that gated recurrent networks are used for sequence modeling."
  },
  {
    "head": "gated recurrent",
    "head_type": "method",
    "tail": "transduction problems",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'",
    "reasoning": "The text states that gated recurrent neural networks 'have been firmly established as state of the art approaches in ... transduction problems', indicating that the method is used for the task."
  },
  {
    "head": "gated recurrent",
    "head_type": "method",
    "tail": "language modeling",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'",
    "reasoning": "The text states that gated recurrent neural networks have been established as state-of-the-art approaches in sequence modeling and transduction problems such as language modeling. This indicates that gated recurrent networks are used for the task of language modeling."
  },
  {
    "head": "gated recurrent",
    "head_type": "method",
    "tail": "machine translation",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5].",
    "syntax": "via 'established'",
    "reasoning": "The text states that gated recurrent neural networks have been established as state-of-the-art approaches in sequence modeling and transduction problems such as machine translation. This indicates that gated recurrent networks are used for machine translation."
  },
  {
    "head": "language modeling",
    "head_type": "task",
    "tail": "sequences",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures[38,24,15]. Recurrent models typically factor computation along the symbol positions of the input and o",
    "syntax": "no pattern",
    "reasoning": "The context mentions 'sequence modeling' and 'language modeling' in relation to 'recurrent neural networks'. While language modeling is a task, 'sequences' are mentioned as the object being modeled. The relation 'applied_to' seems most fitting as the task of language modeling is applied to sequences, but the connection is not explicit and the syntax is not clear."
  },
  {
    "head": "machine translation",
    "head_type": "task",
    "tail": "sequences",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Introduction",
    "evidence": "Recurrent neural networks, long short-term memory[13] and gated recurrent[7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation[35,2,5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures[38,24,15]. Recurrent models typically factor computation along the symbol positions of the input and o",
    "syntax": "no pattern",
    "reasoning": "The text mentions machine translation as a problem where recurrent neural networks are used. While machine translation deals with sequences, the direct relationship between 'machine translation' (TASK) and 'sequences' (OBJECT) is not explicitly stated as 'applied_to'. The context focuses more on the methods used for machine translation rather than the direct application of the task to sequences."
  },
  {
    "head": "Extended Neural GPU",
    "head_type": "method",
    "tail": "ConvS2S",
    "tail_type": "method",
    "relation": "based_on",
    "confidence": "HIGH",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions.",
    "syntax": "via 'forms'",
    "reasoning": "The text states that the Extended Neural GPU 'forms the foundation of' ConvS2S, indicating that ConvS2S is based on the Extended Neural GPU."
  },
  {
    "head": "Extended Neural GPU",
    "head_type": "method",
    "tail": "convolutional neural networks",
    "tail_type": "method",
    "relation": "based_on",
    "confidence": "HIGH",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions.",
    "syntax": "via 'forms'",
    "reasoning": "The text states that the Extended Neural GPU, ByteNet, and ConvS2S 'use convolutional neural networks as basic building block', which indicates that convolutional neural networks are the foundation or basis for these methods."
  },
  {
    "head": "Extended Neural GPU",
    "head_type": "method",
    "tail": "learning dependencies",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "LOW",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This mak",
    "syntax": "no pattern",
    "reasoning": "The text mentions that the Extended Neural GPU is a foundation for learning dependencies, but it doesn't explicitly state that the Extended Neural GPU is used for learning dependencies. The relationship is implied rather than directly stated."
  },
  {
    "head": "ByteNet",
    "head_type": "method",
    "tail": "ConvS2S",
    "tail_type": "method",
    "relation": "based_on",
    "confidence": "HIGH",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions.",
    "syntax": "via 'forms'",
    "reasoning": "The text states that ByteNet and ConvS2S 'forms the foundation' of a goal, and that they 'use convolutional neural networks as basic building block'. This implies that ByteNet and ConvS2S are built upon or derived from the concept of using convolutional neural networks, fitting the 'based_on' relation."
  },
  {
    "head": "ByteNet",
    "head_type": "method",
    "tail": "convolutional neural networks",
    "tail_type": "method",
    "relation": "based_on",
    "confidence": "HIGH",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions.",
    "syntax": "via 'forms'",
    "reasoning": "The text states that ByteNet uses convolutional neural networks as a basic building block, indicating that ByteNet is based on convolutional neural networks."
  },
  {
    "head": "ByteNet",
    "head_type": "method",
    "tail": "learning dependencies",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "LOW",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This mak",
    "syntax": "no pattern",
    "reasoning": "The text mentions ByteNet in the context of models that aim to reduce sequential computation and compute hidden representations in parallel. While 'learning dependencies' is a task that ByteNet likely performs, the text doesn't explicitly state 'ByteNet for learning dependencies' or a similar direct phrasing. The connection is implied through the description of the models' goals and mechanisms."
  },
  {
    "head": "ConvS2S",
    "head_type": "method",
    "tail": "convolutional neural networks",
    "tail_type": "method",
    "relation": "based_on",
    "confidence": "HIGH",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions.",
    "syntax": "via 'forms'",
    "reasoning": "The text states that ConvS2S uses convolutional neural networks as a basic building block, indicating that ConvS2S is based on convolutional neural networks."
  },
  {
    "head": "ConvS2S",
    "head_type": "method",
    "tail": "learning dependencies",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "LOW",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This mak",
    "syntax": "no pattern",
    "reasoning": "The text mentions that ConvS2S uses convolutional neural networks as a basic building block for computing hidden representations in parallel. While 'learning dependencies' is a task, the text doesn't explicitly state that ConvS2S is used for this task. The relationship is implied rather than directly stated, making the confidence low."
  },
  {
    "head": "ConvS2S",
    "head_type": "method",
    "tail": "attention",
    "tail_type": "other",
    "relation": "based_on",
    "confidence": "LOW",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This mak",
    "syntax": "no pattern",
    "reasoning": "The text states that ConvS2S uses convolutional neural networks as a basic building block, implying it is based on them. However, the tail entity 'attention' is not directly related to ConvS2S in this context. The sentence structure does not clearly indicate a direct relationship between ConvS2S and 'attention' as a foundational element or component in the same way it does with convolutional neural networks."
  },
  {
    "head": "convolutional neural networks",
    "head_type": "method",
    "tail": "learning dependencies",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This mak",
    "syntax": "no pattern",
    "reasoning": "The text states that convolutional neural networks are used as a 'basic building block' for models that aim to compute hidden representations, which is a form of task execution or problem-solving."
  },
  {
    "head": "convolutional neural networks",
    "head_type": "method",
    "tail": "Transformer",
    "tail_type": "method",
    "relation": "based_on",
    "confidence": "LOW",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This mak",
    "syntax": "no pattern",
    "reasoning": "The text states that the Extended Neural GPU, ByteNet, and ConvS2S 'use convolutional neural networks as basic building block'. This implies that these models are built upon or derived from convolutional neural networks, fitting the 'based_on' relation. However, the phrasing 'basic building block' is not as direct as 'based on', leading to a lower confidence."
  },
  {
    "head": "convolutional neural networks",
    "head_type": "method",
    "tail": "attention",
    "tail_type": "other",
    "relation": "based_on",
    "confidence": "LOW",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This mak",
    "syntax": "no pattern",
    "reasoning": "The text states that the models mentioned 'use convolutional neural networks as basic building block', which implies that these models are based on CNNs. However, the syntax is not explicit and the head entity is a task/domain rather than a specific method."
  },
  {
    "head": "convolutional neural networks",
    "head_type": "method",
    "tail": "Multi-Head Attention",
    "tail_type": "other",
    "relation": "based_on",
    "confidence": "HIGH",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This mak",
    "syntax": "no pattern",
    "reasoning": "The text states that 'convolutional neural networks' are used as a 'basic building block' for other models, indicating that these other models are based on CNNs."
  },
  {
    "head": "these models",
    "head_type": "generic",
    "tail": "learning dependencies",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "LOW",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This mak",
    "syntax": "no pattern",
    "reasoning": "The text mentions that the models are used for learning dependencies, but the connection is indirect and not explicitly stated with a clear syntactic marker. The phrase 'learning dependencies' describes a general goal or capability rather than a specific task the models are directly applied to in the provided snippet."
  },
  {
    "head": "these models",
    "head_type": "generic",
    "tail": "Transformer",
    "tail_type": "method",
    "relation": "based_on",
    "confidence": "LOW",
    "section": "Background",
    "evidence": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU[16], ByteNet[18] and ConvS2S[9], all of which use convolutional neural networks as basic building block, computing hidden representations in parallel for all input and output positions. In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This mak",
    "syntax": "no pattern",
    "reasoning": "The text states that the models use convolutional neural networks as a basic building block, implying they are based on this architecture. However, the head entity 'these models' is very generic and the direct syntactic link is not as strong as in typical 'based_on' examples."
  },
  {
    "head": "neural sequence transduction models",
    "head_type": "method",
    "tail": "encoder-decoder structure",
    "tail_type": "other",
    "relation": "based_on",
    "confidence": "HIGH",
    "section": "Model Architecture",
    "evidence": "Most competitive neural sequence transduction models have an encoder-decoder structure[5,2,35].",
    "syntax": "via 'have'",
    "reasoning": "The context states that 'neural sequence transduction models have an encoder-decoder structure', indicating that the encoder-decoder structure is a foundational component or basis for these models."
  },
  {
    "head": "neural sequence transduction models",
    "head_type": "method",
    "tail": "input sequence",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Model Architecture",
    "evidence": "Most competitive neural sequence transduction models have an encoder-decoder structure[5,2,35]. Here, the encoder maps an input sequence of symbol representations (x 1,..., x n ) to a sequence of continuous representations z = (z 1,..., z n ). Given z, the decoder then generates an output sequence (y 1,..., y m ) of symbols one element at a time. At each step the model is auto-regressive[10], consuming the previously generated symbols as additional input when generating the next. The Transformer",
    "syntax": "no pattern",
    "reasoning": "The context describes how neural sequence transduction models process an 'input sequence' by mapping it to a sequence of continuous representations. This fits the 'applied_to' relation where a method (neural sequence transduction models) processes an object (input sequence)."
  },
  {
    "head": "neural sequence transduction models",
    "head_type": "method",
    "tail": "symbol representations",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Model Architecture",
    "evidence": "Most competitive neural sequence transduction models have an encoder-decoder structure[5,2,35]. Here, the encoder maps an input sequence of symbol representations (x 1,..., x n ) to a sequence of continuous representations z = (z 1,..., z n ). Given z, the decoder then generates an output sequence (y 1,..., y m ) of symbols one element at a time. At each step the model is auto-regressive[10], consuming the previously generated symbols as additional input when generating the next. The Transformer",
    "syntax": "no pattern",
    "reasoning": "The context states that neural sequence transduction models map an input sequence of symbol representations to a sequence of continuous representations. This indicates that the models are processing or operating on symbol representations."
  },
  {
    "head": "neural sequence transduction models",
    "head_type": "method",
    "tail": "sequence of continuous representations",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Model Architecture",
    "evidence": "Most competitive neural sequence transduction models have an encoder-decoder structure[5,2,35]. Here, the encoder maps an input sequence of symbol representations (x 1,..., x n ) to a sequence of continuous representations z = (z 1,..., z n ). Given z, the decoder then generates an output sequence (y 1,..., y m ) of symbols one element at a time. At each step the model is auto-regressive[10], consuming the previously generated symbols as additional input when generating the next. The Transformer",
    "syntax": "no pattern",
    "reasoning": "The context describes how neural sequence transduction models process an input sequence to produce a sequence of continuous representations, which aligns with the 'applied_to' relation where a method processes an object or domain data."
  },
  {
    "head": "encoder-decoder structure",
    "head_type": "other",
    "tail": "input sequence",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Model Architecture",
    "evidence": "Most competitive neural sequence transduction models have an encoder-decoder structure[5,2,35]. Here, the encoder maps an input sequence of symbol representations (x 1,..., x n ) to a sequence of continuous representations z = (z 1,..., z n ). Given z, the decoder then generates an output sequence (y 1,..., y m ) of symbols one element at a time. At each step the model is auto-regressive[10], consuming the previously generated symbols as additional input when generating the next. The Transformer",
    "syntax": "no pattern",
    "reasoning": "The context states that the encoder maps an 'input sequence' to representations, indicating that the encoder-decoder structure is applied to process input sequences."
  },
  {
    "head": "encoder-decoder structure",
    "head_type": "other",
    "tail": "symbol representations",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Model Architecture",
    "evidence": "Most competitive neural sequence transduction models have an encoder-decoder structure[5,2,35]. Here, the encoder maps an input sequence of symbol representations (x 1,..., x n ) to a sequence of continuous representations z = (z 1,..., z n ). Given z, the decoder then generates an output sequence (y 1,..., y m ) of symbols one element at a time. At each step the model is auto-regressive[10], consuming the previously generated symbols as additional input when generating the next. The Transformer",
    "syntax": "no pattern",
    "reasoning": "The context states that the encoder maps an input sequence of symbol representations to a sequence of continuous representations, indicating that the encoder-decoder structure is applied to process symbol representations."
  },
  {
    "head": "encoder-decoder structure",
    "head_type": "other",
    "tail": "sequence of continuous representations",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Model Architecture",
    "evidence": "Most competitive neural sequence transduction models have an encoder-decoder structure[5,2,35]. Here, the encoder maps an input sequence of symbol representations (x 1,..., x n ) to a sequence of continuous representations z = (z 1,..., z n ). Given z, the decoder then generates an output sequence (y 1,..., y m ) of symbols one element at a time. At each step the model is auto-regressive[10], consuming the previously generated symbols as additional input when generating the next. The Transformer",
    "syntax": "no pattern",
    "reasoning": "The context describes the encoder-decoder structure as mapping an input sequence to a sequence of continuous representations, which suggests it is applied to process this type of data."
  },
  {
    "head": "the encoder",
    "head_type": "generic",
    "tail": "input sequence",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Model Architecture",
    "evidence": "Here, the encoder maps an input sequence of symbol representations (x 1,..., x n ) to a sequence of continuous representations z = (z 1,..., z n ).",
    "syntax": "via 'maps'",
    "reasoning": "The context states 'the encoder maps an input sequence', indicating that the encoder (METHOD) processes the input sequence (OBJECT)."
  },
  {
    "head": "the encoder",
    "head_type": "generic",
    "tail": "symbol representations",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Model Architecture",
    "evidence": "Here, the encoder maps an input sequence of symbol representations (x 1,..., x n ) to a sequence of continuous representations z = (z 1,..., z n ).",
    "syntax": "via 'maps'",
    "reasoning": "The context states 'the encoder maps an input sequence of symbol representations', indicating that the encoder (METHOD) processes or transforms symbol representations (OBJECT)."
  },
  {
    "head": "the encoder",
    "head_type": "generic",
    "tail": "sequence of continuous representations",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Model Architecture",
    "evidence": "Here, the encoder maps an input sequence of symbol representations (x 1,..., x n ) to a sequence of continuous representations z = (z 1,..., z n ).",
    "syntax": "via 'maps'; using 'to'",
    "reasoning": "The context states that 'the encoder maps an input sequence... to a sequence of continuous representations', indicating that the encoder (METHOD) processes or transforms the input sequence (OBJECT) into the output sequence."
  },
  {
    "head": "z",
    "head_type": "generic",
    "tail": "output sequence",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Model Architecture",
    "evidence": "Most competitive neural sequence transduction models have an encoder-decoder structure[5,2,35]. Here, the encoder maps an input sequence of symbol representations (x 1,..., x n ) to a sequence of continuous representations z = (z 1,..., z n ). Given z, the decoder then generates an output sequence (y 1,..., y m ) of symbols one element at a time. At each step the model is auto-regressive[10], consuming the previously generated symbols as additional input when generating the next. The Transformer",
    "syntax": "no pattern",
    "reasoning": "The context describes how the encoder maps an input sequence to a sequence of representations 'z', and then the decoder generates an 'output sequence' from 'z'. This suggests 'z' is used in the process of generating the output sequence, fitting the 'applied_to' relation where 'z' is processed to produce the output."
  },
  {
    "head": "z",
    "head_type": "generic",
    "tail": "symbols",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Model Architecture",
    "evidence": "Most competitive neural sequence transduction models have an encoder-decoder structure[5,2,35]. Here, the encoder maps an input sequence of symbol representations (x 1,..., x n ) to a sequence of continuous representations z = (z 1,..., z n ). Given z, the decoder then generates an output sequence (y 1,..., y m ) of symbols one element at a time. At each step the model is auto-regressive[10], consuming the previously generated symbols as additional input when generating the next. The Transformer",
    "syntax": "no pattern",
    "reasoning": "The context states that 'z' maps an input sequence of symbol representations to a sequence of continuous representations, and the decoder generates an output sequence of symbols. This indicates that 'z' is applied to process or represent symbols."
  },
  {
    "head": "the decoder",
    "head_type": "generic",
    "tail": "output sequence",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Model Architecture",
    "evidence": "Given z, the decoder then generates an output sequence (y 1,..., y m ) of symbols one element at a time.",
    "syntax": "via 'Given'",
    "reasoning": "The context states that 'the decoder then generates an output sequence', indicating that the decoder (a method or component) processes or produces the output sequence (an object)."
  },
  {
    "head": "the decoder",
    "head_type": "generic",
    "tail": "symbols",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Model Architecture",
    "evidence": "Given z, the decoder then generates an output sequence (y 1,..., y m ) of symbols one element at a time.",
    "syntax": "via 'Given'",
    "reasoning": "The context suggests that the decoder (a method or component) generates an output sequence of symbols. While 'symbols' are not explicitly a dataset or task, they represent the objects or data that the decoder processes or acts upon, fitting the 'applied_to' relation."
  },
  {
    "head": "multi-head self-attention mechanism",
    "head_type": "other",
    "tail": "outputs",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Encoder and Decoder Stacks",
    "evidence": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection[11] around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer is Layer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these",
    "syntax": "no pattern",
    "reasoning": "The text mentions that the multi-head self-attention mechanism is part of the encoder, which processes inputs to produce outputs. However, the direct relationship between the mechanism and 'outputs' is not explicitly stated as 'applied to' or any other defined relation type. The connection is implied through the encoder's function."
  },
  {
    "head": "residual connection",
    "head_type": "other",
    "tail": "outputs",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Encoder and Decoder Stacks",
    "evidence": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection[11] around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer is Layer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these",
    "syntax": "no pattern",
    "reasoning": "The context mentions 'residual connection around each of the two sub-layers', and the sub-layers process inputs to produce outputs. This suggests the residual connection is applied to the outputs of these sub-layers, which are derived from the inputs. However, the phrasing is indirect and the 'outputs' are not explicitly stated as the tail entity."
  },
  {
    "head": "residual connection",
    "head_type": "other",
    "tail": "decoder",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Encoder and Decoder Stacks",
    "evidence": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection[11] around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer is Layer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these",
    "syntax": "no pattern",
    "reasoning": "The context mentions 'residual connection around each of the two sub-layers', where 'sub-layers' are part of the encoder. While 'decoder' is not explicitly mentioned in the immediate context, residual connections are a common architectural component in both encoders and decoders of sequence-to-sequence models. The relation 'applied_to' fits as the residual connection is a component that is part of or applied to the decoder's structure."
  },
  {
    "head": "residual connection",
    "head_type": "other",
    "tail": "layers",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Encoder and Decoder Stacks",
    "evidence": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection[11] around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer is Layer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these",
    "syntax": "no pattern",
    "reasoning": "The context mentions 'residual connection around each of the two sub-layers', where 'layers' are part of the encoder architecture. This suggests the residual connection is applied to the layers within the encoder."
  },
  {
    "head": "layer normalization",
    "head_type": "other",
    "tail": "decoder",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Encoder and Decoder Stacks",
    "evidence": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection[11] around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer is Layer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these",
    "syntax": "no pattern",
    "reasoning": "The context describes the structure of an encoder, mentioning that layer normalization is applied after residual connections around sub-layers. While 'applied_to' is a potential fit, the context doesn't explicitly state that layer normalization is applied *to* the decoder. It's more about its placement within the encoder's layers. The relation is not strongly stated, hence MEDIUM confidence."
  },
  {
    "head": "layer normalization",
    "head_type": "other",
    "tail": "sub-layers",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Encoder and Decoder Stacks",
    "evidence": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection[11] around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer is Layer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these",
    "syntax": "no pattern",
    "reasoning": "The context states 'followed by layer normalization' and 'output of each sub-layer is Layer Norm(x + Sublayer(x))', indicating that layer normalization is applied to the output of the sub-layers."
  },
  {
    "head": "Layer Norm",
    "head_type": "other",
    "tail": "decoder",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Encoder and Decoder Stacks",
    "evidence": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection[11] around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer is Layer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these",
    "syntax": "no pattern",
    "reasoning": "The context describes the output of a sub-layer being processed by Layer Norm, indicating that Layer Norm is applied to the output of the decoder's sub-layers (which can be considered an object or component within the decoder)."
  },
  {
    "head": "Layer Norm",
    "head_type": "other",
    "tail": "sub-layers",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Encoder and Decoder Stacks",
    "evidence": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection[11] around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer is Layer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these",
    "syntax": "no pattern",
    "reasoning": "The context states 'output of each sub-layer is Layer Norm(x + Sublayer(x))', indicating that Layer Norm is applied to the output of the sub-layers."
  },
  {
    "head": "residual connections",
    "head_type": "other",
    "tail": "output embeddings",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Encoder and Decoder Stacks",
    "evidence": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection[11] around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer is Layer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these",
    "syntax": "no pattern",
    "reasoning": "The context mentions residual connections are used around sub-layers within an encoder, which processes input data. While not explicitly stated as 'applied to', the residual connection is a component integrated into the processing of the encoder's internal representations, which can be considered a form of application to the data processing pipeline."
  },
  {
    "head": "residual connections",
    "head_type": "other",
    "tail": "predictions",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Encoder and Decoder Stacks",
    "evidence": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection[11] around each of the two sub-layers, followed by layer normalization[1]. That is, the output of each sub-layer is Layer Norm(x + Sublayer(x)), where Sublayer(x) is the function implemented by the sub-layer itself. To facilitate these",
    "syntax": "no pattern",
    "reasoning": "The context mentions residual connections are used around sub-layers within an encoder, which processes input data. While 'predictions' is mentioned later in the text, the direct connection to 'residual connections' is weak and indirect. The residual connection is a component within a larger architecture, and its application is to the intermediate outputs of sub-layers, not directly to 'predictions' as an object in the way 'applied_to' is typically used for processing domain data."
  },
  {
    "head": "attention function",
    "head_type": "other",
    "tail": "query",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Attention",
    "evidence": "An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors.",
    "syntax": "via 'described'",
    "reasoning": "The context describes what an attention function is and how it operates, mentioning 'query' as one of its inputs. However, it doesn't explicitly state that the attention function is applied to queries in a way that fits the 'applied_to' definition of processing a domain or object. The relation is weak and more definitional."
  },
  {
    "head": "attention function",
    "head_type": "other",
    "tail": "key-value pairs",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Attention",
    "evidence": "An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors.",
    "syntax": "via 'described'",
    "reasoning": "The context describes the attention function's role in processing key-value pairs, which aligns with the 'applied_to' relation where a method or concept processes an object or domain data."
  },
  {
    "head": "attention function",
    "head_type": "other",
    "tail": "query",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Attention",
    "evidence": "An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors.",
    "syntax": "via 'described'",
    "reasoning": "The context describes what an attention function is and how it operates, mentioning 'query' as one of its inputs. However, it doesn't explicitly state that the attention function is applied to queries in a way that fits the 'applied_to' definition of processing a domain or object. The relation is weak and more definitional."
  },
  {
    "head": "attention function",
    "head_type": "other",
    "tail": "keys",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Attention",
    "evidence": "An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors.",
    "syntax": "via 'described'; using 'of', 'to'",
    "reasoning": "The context describes what an attention function is and its inputs/outputs (query, keys, values, output). While 'keys' are mentioned as part of the input, the relation is descriptive rather than indicating the attention function is actively processing or being applied to 'keys' in a task-oriented or evaluative manner. The relation is weak and could be interpreted as 'NONE'."
  },
  {
    "head": "Scaled Dot-Product Attention",
    "head_type": "other",
    "tail": "queries",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Scaled Dot-Product Attention",
    "evidence": "We call our particular attention \"Scaled Dot-Product Attention\" (Figure2). The input consists of queries and keys of dimension d k, and values of dimension d v. We compute the dot products of the query with all keys, divide each by \u221a d k, and apply a softmax function to obtain the weights on the values. In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q. The keys and values are also packed together into matrices K and V. We compute ",
    "syntax": "no pattern",
    "reasoning": "The context describes how 'Scaled Dot-Product Attention' operates on 'queries' (and keys/values) as its input, which fits the 'applied_to' relation where a method or mechanism processes an object or domain data."
  },
  {
    "head": "Scaled Dot-Product Attention",
    "head_type": "other",
    "tail": "keys",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Scaled Dot-Product Attention",
    "evidence": "We call our particular attention \"Scaled Dot-Product Attention\" (Figure2). The input consists of queries and keys of dimension d k, and values of dimension d v. We compute the dot products of the query with all keys, divide each by \u221a d k, and apply a softmax function to obtain the weights on the values. In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q. The keys and values are also packed together into matrices K and V. We compute ",
    "syntax": "no pattern",
    "reasoning": "The context states 'We compute the dot products of the query with all keys', indicating that the 'keys' are an input object to the 'Scaled Dot-Product Attention' mechanism. This aligns with the 'applied_to' relation where a method processes an object."
  },
  {
    "head": "Scaled Dot-Product Attention",
    "head_type": "other",
    "tail": "values",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Scaled Dot-Product Attention",
    "evidence": "We call our particular attention \"Scaled Dot-Product Attention\" (Figure2). The input consists of queries and keys of dimension d k, and values of dimension d v. We compute the dot products of the query with all keys, divide each by \u221a d k, and apply a softmax function to obtain the weights on the values. In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix Q. The keys and values are also packed together into matrices K and V. We compute ",
    "syntax": "no pattern",
    "reasoning": "The context describes how 'Scaled Dot-Product Attention' operates on 'values' by computing weights and applying a softmax function. This suggests that the attention mechanism is being applied to the values as part of its processing."
  },
  {
    "head": "attention function",
    "head_type": "method",
    "tail": "keys",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Multi-Head Attention",
    "evidence": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k,",
    "syntax": "via 'found'; using 'of'",
    "reasoning": "The context mentions 'performing a single attention function with d model-dimensional keys', suggesting the attention function is applied to or operates on the keys. However, the phrasing is indirect and the primary focus of the sentence is on projecting keys, values, and queries, not solely on the application of the attention function to keys."
  },
  {
    "head": "attention function",
    "head_type": "method",
    "tail": "values",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Multi-Head Attention",
    "evidence": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k,",
    "syntax": "via 'found'; using 'of'",
    "reasoning": "The context mentions 'attention function' and 'values' but the relationship is not explicit. The phrase 'attention function with d model-dimensional keys, values and queries' suggests that the attention function operates on values, but it's not a direct application or evaluation."
  },
  {
    "head": "attention function",
    "head_type": "method",
    "tail": "queries",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Multi-Head Attention",
    "evidence": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k,",
    "syntax": "via 'found'; using 'of', 'with'",
    "reasoning": "The context states 'performing a single attention function with ... queries', indicating that the attention function is applied to queries."
  },
  {
    "head": "linear projections",
    "head_type": "other",
    "tail": "queries",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Multi-Head Attention",
    "evidence": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k,",
    "syntax": "via 'learned'; using 'of', 'with'",
    "reasoning": "The context states 'linearly project the queries, keys and values', indicating that linear projections are applied to the queries (and keys/values)."
  },
  {
    "head": "linear projections",
    "head_type": "other",
    "tail": "keys",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Multi-Head Attention",
    "evidence": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k,",
    "syntax": "via 'learned'; using 'of'",
    "reasoning": "The context states 'linearly project the queries, keys and values', indicating that the 'linear projections' are being applied to the 'keys' (as well as queries and values)."
  },
  {
    "head": "linear projections",
    "head_type": "other",
    "tail": "values",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Multi-Head Attention",
    "evidence": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k,",
    "syntax": "via 'learned'; using 'of'",
    "reasoning": "The context suggests that 'linear projections' are being applied to 'values' (and keys, queries) as part of an attention mechanism, transforming them. While 'values' is an OBJECT, the relation is not as direct as in Example 8 where a method is applied to a domain. The phrasing 'linearly project the queries, keys and values' indicates an operation being performed on these components."
  },
  {
    "head": "linear projections",
    "head_type": "other",
    "tail": "attention function",
    "tail_type": "method",
    "relation": "based_on",
    "confidence": "MEDIUM",
    "section": "Multi-Head Attention",
    "evidence": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k,",
    "syntax": "via 'learned'; using 'of'",
    "reasoning": "The text suggests that linear projections are used as a component or a modification of the attention function, implying that the attention function might be based on or incorporate linear projections. However, the phrasing 'linearly project the queries, keys and values' could also imply that linear projections are applied to the components of the attention function, making 'applied_to' a possible alternative. Given the context, 'based_on' seems slightly more fitting as it suggests a foundational element or a derived form."
  },
  {
    "head": "these projected versions",
    "head_type": "generic",
    "tail": "queries",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Multi-Head Attention",
    "evidence": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k, d k and d v dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding d v -dimensional output values. These are concatenated and once again projected, resulting in the final ",
    "syntax": "no pattern",
    "reasoning": "The text describes performing an attention function on 'projected versions of queries', which suggests an application of a method (attention function) to an object (projected queries). However, the relationship is not explicitly stated with clear keywords, making the confidence low."
  },
  {
    "head": "these projected versions",
    "head_type": "generic",
    "tail": "keys",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Multi-Head Attention",
    "evidence": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k, d k and d v dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding d v -dimensional output values. These are concatenated and once again projected, resulting in the final ",
    "syntax": "no pattern",
    "reasoning": "The context mentions 'projected versions of queries, keys and values' and then states 'we then perform the attention function in parallel'. This suggests that the projected versions are the input to the attention function, which is a form of application. However, the relationship is not explicitly stated and the entities are somewhat abstract."
  },
  {
    "head": "these projected versions",
    "head_type": "generic",
    "tail": "values",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Multi-Head Attention",
    "evidence": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k, d k and d v dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding d v -dimensional output values. These are concatenated and once again projected, resulting in the final ",
    "syntax": "no pattern",
    "reasoning": "The context mentions 'projected versions of queries, keys and values' and then states 'we then perform the attention function in parallel, yielding d v -dimensional output values'. This suggests that the projected versions are inputs to the attention function, which can be interpreted as being 'applied to' the attention function. However, the relationship is not explicitly stated and the entities are abstract."
  },
  {
    "head": "these projected versions",
    "head_type": "generic",
    "tail": "output values",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Multi-Head Attention",
    "evidence": "On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding d v -dimensional output values.",
    "syntax": "via 'perform'; using 'On', 'in'",
    "reasoning": "The context states 'perform the attention function in parallel, yielding d v -dimensional output values' on 'these projected versions of queries, keys and values'. This indicates that the attention function (a method) is being applied to the projected versions of queries, keys, and values (objects/data) to produce output values."
  },
  {
    "head": "attention function",
    "head_type": "method",
    "tail": "output values",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Multi-Head Attention",
    "evidence": "Instead of performing a single attention function with d model -dimensional keys, values and queries, we found it beneficial to linearly project the queries, keys and values h times with different, learned linear projections to d k, d k and d v dimensions, respectively. On each of these projected versions of queries, keys and values we then perform the attention function in parallel, yielding d v -dimensional output values. These are concatenated and once again projected, resulting in the final ",
    "syntax": "no pattern",
    "reasoning": "The context describes performing an 'attention function' and then processing 'output values' derived from it. While 'output values' isn't a typical object or domain, the phrasing suggests the attention function is being applied to generate or process these values, fitting the 'applied_to' relation more closely than others."
  },
  {
    "head": "the model",
    "head_type": "generic",
    "tail": "information",
    "tail_type": "other",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Multi-Head Attention",
    "evidence": "Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions.",
    "syntax": "via 'allows'",
    "reasoning": "The context suggests that the model processes or utilizes 'information' from different subspaces, which aligns with the 'applied_to' relation where a method (the model) processes an object or domain data (information)."
  },
  {
    "head": "the model",
    "head_type": "generic",
    "tail": "representation subspaces",
    "tail_type": "other",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Multi-Head Attention",
    "evidence": "Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions.",
    "syntax": "via 'allows'",
    "reasoning": "The context suggests that the model (a method) is processing or utilizing 'representation subspaces' (an object/domain data) to attend to information. While 'applied_to' fits, the generic nature of 'the model' and 'representation subspaces' makes the relation less definitive than typical examples."
  },
  {
    "head": "Transformer",
    "head_type": "method",
    "tail": "multi-head attention",
    "tail_type": "other",
    "relation": "based_on",
    "confidence": "HIGH",
    "section": "Applications of Attention in our Model",
    "evidence": "The Transformer uses multi-head attention in three different ways: \u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder.",
    "syntax": "via 'uses'",
    "reasoning": "The text explicitly states that the Transformer 'uses' multi-head attention, indicating that multi-head attention is a fundamental component or building block upon which the Transformer is based."
  },
  {
    "head": "Transformer",
    "head_type": "method",
    "tail": "encoder-decoder attention",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Applications of Attention in our Model",
    "evidence": "The Transformer uses multi-head attention in three different ways: \u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder.",
    "syntax": "via 'uses'; using 'In'",
    "reasoning": "The context states that the Transformer 'uses' encoder-decoder attention, indicating that this attention mechanism is a component or function that the Transformer method performs or is designed for."
  },
  {
    "head": "Transformer",
    "head_type": "method",
    "tail": "queries",
    "tail_type": "other",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Applications of Attention in our Model",
    "evidence": "The Transformer uses multi-head attention in three different ways: \u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder.",
    "syntax": "via 'uses'",
    "reasoning": "The context describes how the Transformer model utilizes multi-head attention, where 'queries' are a component processed within the attention mechanism. While not a direct application to a domain like protein sequences, it describes a functional application of a component within the method."
  },
  {
    "head": "multi-head attention",
    "head_type": "other",
    "tail": "encoder-decoder attention",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Applications of Attention in our Model",
    "evidence": "The Transformer uses multi-head attention in three different ways: \u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder.",
    "syntax": "via 'uses'; using 'In'",
    "reasoning": "The context states that the Transformer 'uses multi-head attention in... encoder-decoder attention layers', indicating that multi-head attention is employed for the task of encoder-decoder attention."
  },
  {
    "head": "values",
    "head_type": "other",
    "tail": "sequence-to-sequence models",
    "tail_type": "method",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Applications of Attention in our Model",
    "evidence": "The Transformer uses multi-head attention in three different ways: \u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9]. \u2022 The encoder contains self-attention layers. In a self-attention layer",
    "syntax": "no pattern",
    "reasoning": "The context mentions that 'memory keys and values come from the output of the encoder' and this 'mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models'. This suggests that the 'values' (from the encoder output) are being used or processed within the context of sequence-to-sequence models, which aligns with an 'applied_to' relationship, although the phrasing is indirect."
  },
  {
    "head": "encoder",
    "head_type": "other",
    "tail": "sequence-to-sequence models",
    "tail_type": "method",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Applications of Attention in our Model",
    "evidence": "The Transformer uses multi-head attention in three different ways: \u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9]. \u2022 The encoder contains self-attention layers. In a self-attention layer",
    "syntax": "no pattern",
    "reasoning": "The context describes how the encoder-decoder attention mechanism in the Transformer is used in conjunction with sequence-to-sequence models, suggesting an application or integration rather than a direct improvement or evaluation."
  },
  {
    "head": "every position in the decoder",
    "head_type": "generic",
    "tail": "sequence-to-sequence models",
    "tail_type": "method",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Applications of Attention in our Model",
    "evidence": "The Transformer uses multi-head attention in three different ways: \u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9]. \u2022 The encoder contains self-attention layers. In a self-attention layer",
    "syntax": "no pattern",
    "reasoning": "The context describes how 'every position in the decoder' interacts with or processes information from 'sequence-to-sequence models' (specifically, the encoder-decoder attention mechanism within them). While not a direct 'method applied to object' in the strictest sense, it describes a functional application or integration within the broader model architecture."
  },
  {
    "head": "all positions in the input sequence",
    "head_type": "generic",
    "tail": "encoder-decoder attention mechanisms",
    "tail_type": "other",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Applications of Attention in our Model",
    "evidence": "The Transformer uses multi-head attention in three different ways: \u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9]. \u2022 The encoder contains self-attention layers. In a self-attention layer",
    "syntax": "no pattern",
    "reasoning": "The context states that 'every position in the decoder to attend over all positions in the input sequence', which indicates that the encoder-decoder attention mechanisms are applied to process information from all positions in the input sequence."
  },
  {
    "head": "all positions in the input sequence",
    "head_type": "generic",
    "tail": "sequence-to-sequence models",
    "tail_type": "method",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Applications of Attention in our Model",
    "evidence": "The Transformer uses multi-head attention in three different ways: \u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9]. \u2022 The encoder contains self-attention layers. In a self-attention layer",
    "syntax": "no pattern",
    "reasoning": "The context describes how 'all positions in the input sequence' are attended to by the decoder, which is a component of 'sequence-to-sequence models'. This suggests that the attention mechanism (implied by the context of Transformer and encoder-decoder attention) is being applied to process information from all positions in the input sequence within the framework of sequence-to-sequence models."
  },
  {
    "head": "encoder-decoder attention mechanisms",
    "head_type": "other",
    "tail": "sequence-to-sequence models",
    "tail_type": "method",
    "relation": "based_on",
    "confidence": "HIGH",
    "section": "Applications of Attention in our Model",
    "evidence": "This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9].",
    "syntax": "via 'mimics'",
    "reasoning": "The context states that the 'encoder-decoder attention mechanisms' mimic 'sequence-to-sequence models', implying that the attention mechanisms are a component or a characteristic derived from or inspired by these models."
  },
  {
    "head": "sequence-to-sequence models",
    "head_type": "method",
    "tail": "self-attention layers",
    "tail_type": "other",
    "relation": "based_on",
    "confidence": "HIGH",
    "section": "Applications of Attention in our Model",
    "evidence": "The Transformer uses multi-head attention in three different ways: \u2022 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as[38,2,9]. \u2022 The encoder contains self-attention layers. In a self-attention layer",
    "syntax": "no pattern",
    "reasoning": "The text states that the Transformer uses multi-head attention in three ways, and one of these ways mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models. This implies that sequence-to-sequence models are a foundational concept or architecture upon which the Transformer's attention mechanism is based or derived from."
  },
  {
    "head": "sequence transduction models",
    "head_type": "method",
    "tail": "input tokens",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Embeddings and Softmax",
    "evidence": "Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension d model.",
    "syntax": "via 'use'; using 'to'",
    "reasoning": "The context states that 'sequence transduction models' 'use learned embeddings to convert the input tokens...to vectors'. This indicates that the models are processing the input tokens."
  },
  {
    "head": "sequence transduction models",
    "head_type": "method",
    "tail": "output tokens",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Embeddings and Softmax",
    "evidence": "Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension d model.",
    "syntax": "via 'use'; using 'to'",
    "reasoning": "The context mentions 'sequence transduction models' and 'output tokens'. The phrase 'convert the input tokens and output tokens to vectors' suggests that the models process or operate on these tokens, which aligns with the 'applied_to' relation. However, the relation is not as direct as in typical 'applied_to' examples, and the syntax 'use...to convert' is slightly ambiguous."
  },
  {
    "head": "sequence transduction models",
    "head_type": "method",
    "tail": "vectors",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Embeddings and Softmax",
    "evidence": "Similarly to other sequence transduction models, we use learned embeddings to convert the input tokens and output tokens to vectors of dimension d model.",
    "syntax": "via 'use'; using 'to'",
    "reasoning": "The context states that sequence transduction models 'use learned embeddings to convert the input tokens and output tokens to vectors'. This indicates that the models process or transform input tokens into vectors, which aligns with the 'applied_to' relation where a method processes an object or domain data."
  },
  {
    "head": "our model",
    "head_type": "generic",
    "tail": "pre-softmax linear transformation",
    "tail_type": "other",
    "relation": "based_on",
    "confidence": "MEDIUM",
    "section": "Embeddings and Softmax",
    "evidence": "In our model, we share the same weight matrix between the two embedding layers and the pre-softmax linear transformation, similar to[30].",
    "syntax": "via 'share'; using 'In', 'between'",
    "reasoning": "The context states that 'our model' shares a weight matrix with the 'pre-softmax linear transformation', implying that the model's architecture or a component of it is derived from or similar to the pre-softmax linear transformation, which aligns with the 'based_on' relation. The confidence is MEDIUM because the phrasing 'share the same weight matrix...similar to' suggests a similarity or inspiration rather than a direct derivation, but it's the closest fit among the provided relation types."
  },
  {
    "head": "our model",
    "head_type": "generic",
    "tail": "the sequence",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Positional Encoding",
    "evidence": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence.",
    "syntax": "via 'contains'; using 'in'",
    "reasoning": "The context mentions 'our model' and 'the sequence', and the phrase 'in order for the model to make use of the order of the sequence' suggests that the model is processing or operating on the sequence. While 'applied_to' is a good fit, the phrasing is not as direct as typical examples, hence the medium confidence."
  },
  {
    "head": "our model",
    "head_type": "generic",
    "tail": "positional encodings",
    "tail_type": "other",
    "relation": "based_on",
    "confidence": "LOW",
    "section": "Positional Encoding",
    "evidence": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension d model as the embeddings, so that the two can be summed. There are many choices of positional encodings, l",
    "syntax": "no pattern",
    "reasoning": "The text states that positional encodings are added to the input embeddings, implying that the model's input is based on these encodings. However, the phrasing is not as direct as typical 'based_on' examples."
  },
  {
    "head": "convolution",
    "head_type": "other",
    "tail": "the sequence",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Positional Encoding",
    "evidence": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence.",
    "syntax": "via 'contains'; using 'in'",
    "reasoning": "The context mentions 'no convolution' and 'order of the sequence', implying a potential application of convolution to sequences, but it's stated negatively. The relation is weak because convolution is explicitly excluded."
  },
  {
    "head": "the model",
    "head_type": "generic",
    "tail": "the sequence",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Positional Encoding",
    "evidence": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence.",
    "syntax": "via 'inject'; using 'in'",
    "reasoning": "The context states 'in order for the model to make use of the order of the sequence', indicating that the model is processing or utilizing the sequence data. The phrase 'inject some information about the relative or absolute position of the tokens in the sequence' further supports that the model is being applied to the sequence."
  },
  {
    "head": "the model",
    "head_type": "generic",
    "tail": "input embeddings",
    "tail_type": "other",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Positional Encoding",
    "evidence": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension d model as the embeddings, so that the two can be summed. There are many choices of positional encodings, l",
    "syntax": "no pattern",
    "reasoning": "The context describes adding 'positional encodings' to 'input embeddings' to inject positional information into the model. This suggests the positional encodings are being applied to the input embeddings as a form of processing or augmentation before they are used by the model."
  },
  {
    "head": "positional encodings",
    "head_type": "other",
    "tail": "embeddings",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Positional Encoding",
    "evidence": "To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks.",
    "syntax": "via 'add'",
    "reasoning": "The context states that 'positional encodings' are added 'to the input embeddings', indicating that the positional encodings are being applied to the embeddings."
  },
  {
    "head": "encoder",
    "head_type": "other",
    "tail": "embeddings",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Positional Encoding",
    "evidence": "To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks.",
    "syntax": "via 'add'; using 'to'",
    "reasoning": "The context suggests that positional encodings are being added to input embeddings, which are then processed by the encoder. While 'add' and 'to' are present, the direct application of the encoder to embeddings isn't explicitly stated as a primary function or evaluation. The relationship is more about how components interact within a larger system rather than a direct 'applied_to' or 'used_for' scenario."
  },
  {
    "head": "decoder stacks",
    "head_type": "other",
    "tail": "embeddings",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Positional Encoding",
    "evidence": "To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks.",
    "syntax": "via 'add'; using 'at', 'to'",
    "reasoning": "The context mentions adding positional encodings to the input embeddings at the bottoms of the encoder and decoder stacks. While 'decoder stacks' are mentioned in relation to 'embeddings', the primary action is 'adding positional encodings', not directly applying the decoder stacks to the embeddings. The relationship is indirect and not a primary application."
  },
  {
    "head": "decoder stacks",
    "head_type": "other",
    "tail": "position",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Positional Encoding",
    "evidence": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension d model as the embeddings, so that the two can be summed. There are many choices of positional encodings, l",
    "syntax": "no pattern",
    "reasoning": "The context mentions 'decoder stacks' and 'position' in relation to injecting positional information. While 'position' can be considered an aspect of an 'object' (like a sequence), the relationship isn't explicitly stated as a direct application or processing. The positional encodings are added to the decoder stacks, which is a form of application, but the direct relationship between 'decoder stacks' and 'position' itself is more about how position information is handled within the stacks rather than the stacks being applied to position."
  },
  {
    "head": "positional encodings",
    "head_type": "other",
    "tail": "embeddings",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Positional Encoding",
    "evidence": "To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks.",
    "syntax": "via 'add'",
    "reasoning": "The context states that 'positional encodings' are added 'to the input embeddings', indicating that the positional encodings are being applied to the embeddings."
  },
  {
    "head": "positional encodings",
    "head_type": "other",
    "tail": "position",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Positional Encoding",
    "evidence": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension d model as the embeddings, so that the two can be summed. There are many choices of positional encodings, l",
    "syntax": "no pattern",
    "reasoning": "The text describes adding positional encodings to input embeddings to incorporate positional information into a model. While 'positional encodings' are a component and 'position' is a concept, the direct relationship isn't a standard 'applied_to' where a method processes a domain. It's more about augmenting embeddings with positional information. The relation is weak because 'position' is an abstract concept rather than a concrete object or domain data."
  },
  {
    "head": "positional encodings",
    "head_type": "other",
    "tail": "position",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Positional Encoding",
    "evidence": "Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension d model as the embeddings, so that the two can be summed. There are many choices of positional encodings, l",
    "syntax": "no pattern",
    "reasoning": "The text describes adding positional encodings to input embeddings to incorporate positional information into a model. While 'positional encodings' are a component and 'position' is a concept, the direct relationship isn't a standard 'applied_to' where a method processes a domain. It's more about augmenting embeddings with positional information. The relation is weak because 'position' is an abstract concept rather than a concrete object or domain data."
  },
  {
    "head": "self-attention layers",
    "head_type": "other",
    "tail": "sequence of symbol representations",
    "tail_type": "object",
    "relation": "compared_with",
    "confidence": "HIGH",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x",
    "syntax": "via 'compare'; using 'to', 'for'",
    "reasoning": "The text explicitly states 'we compare various aspects of self-attention layers to the recurrent and convolutional layers', indicating a comparison between the head and tail entities."
  },
  {
    "head": "self-attention layers",
    "head_type": "other",
    "tail": "sequence",
    "tail_type": "object",
    "relation": "compared_with",
    "confidence": "HIGH",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x",
    "syntax": "via 'compare'; using 'to'",
    "reasoning": "The text explicitly states 'compare various aspects of self-attention layers to the recurrent and convolutional layers', indicating a comparison between the head and tail entities."
  },
  {
    "head": "self-attention layers",
    "head_type": "other",
    "tail": "hidden layer",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x i, z i \u2208 R d, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount",
    "syntax": "no pattern",
    "reasoning": "The text mentions 'self-attention layers' and 'a hidden layer', and the context discusses mapping sequences. While 'applied_to' is a possibility, the relationship isn't explicitly stated or strongly implied. The syntax doesn't provide a clear indicator."
  },
  {
    "head": "self-attention layers",
    "head_type": "other",
    "tail": "sequence transduction",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x i, z i \u2208 R d, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount",
    "syntax": "no pattern",
    "reasoning": "The text states that self-attention layers are commonly used for sequence transduction tasks, aligning with the 'used_for' relation where a method or component is employed to perform a specific task."
  },
  {
    "head": "recurrent and convolutional layers",
    "head_type": "other",
    "tail": "sequence of symbol representations",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x",
    "syntax": "via 'compare'; using 'to', 'for'",
    "reasoning": "The context mentions 'recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations', indicating that these layers are applied to process sequences of symbol representations. While 'compare' is present, the core action described for the head entity is its application to the tail entity."
  },
  {
    "head": "recurrent and convolutional layers",
    "head_type": "other",
    "tail": "sequence",
    "tail_type": "object",
    "relation": "compared_with",
    "confidence": "HIGH",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x",
    "syntax": "via 'compare'; using 'to'",
    "reasoning": "The text explicitly states 'compare various aspects of self-attention layers to the recurrent and convolutional layers', indicating a comparison between the two entities."
  },
  {
    "head": "recurrent and convolutional layers",
    "head_type": "other",
    "tail": "hidden layer",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x i, z i \u2208 R d, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount",
    "syntax": "no pattern",
    "reasoning": "The context mentions 'recurrent and convolutional layers commonly used for mapping one variable-length sequence... to another sequence... such as a hidden layer'. This suggests that these layers are applied to process data that forms a hidden layer, but the connection is not explicit or strong."
  },
  {
    "head": "recurrent and convolutional layers",
    "head_type": "other",
    "tail": "sequence transduction",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "HIGH",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x i, z i \u2208 R d, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount",
    "syntax": "no pattern",
    "reasoning": "The context states that recurrent and convolutional layers are 'commonly used for mapping one variable-length sequence... to another sequence', which directly indicates a 'used_for' relationship where the layers are used for the task of sequence transduction."
  },
  {
    "head": "self-attention layer",
    "head_type": "other",
    "tail": "sentence representations",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x i, z i \u2208 R d, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount",
    "syntax": "no pattern",
    "reasoning": "The text mentions 'self-attention layers' and 'sentence representations' in a comparative context, suggesting that self-attention layers are used to process or generate sentence representations. However, the explicit verb linking them is 'compare', and the direct application is not clearly stated, making the relation 'applied_to' a weak inference."
  },
  {
    "head": "recurrent layer",
    "head_type": "other",
    "tail": "sentence representations",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x i, z i \u2208 R d, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount",
    "syntax": "no pattern",
    "reasoning": "The context mentions 'recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations... to another sequence', which suggests that recurrent layers are applied to sequence representations. However, the syntax is not explicit, and the primary focus of the text is on self-attention layers."
  },
  {
    "head": "recurrent layer",
    "head_type": "other",
    "tail": "machine translations",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "LOW",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x i, z i \u2208 R d, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount",
    "syntax": "no pattern",
    "reasoning": "The context mentions 'recurrent and convolutional layers commonly used for mapping one variable-length sequence... to another sequence', which suggests a 'used_for' relationship between recurrent layers and sequence transduction (which includes machine translations). However, the direct mention of 'machine translations' as the tail entity is absent, and the syntax is not explicit."
  },
  {
    "head": "self-attention layers",
    "head_type": "other",
    "tail": "sentence representations",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "LOW",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x i, z i \u2208 R d, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount",
    "syntax": "no pattern",
    "reasoning": "The text mentions 'self-attention layers' and 'sentence representations' in a comparative context, suggesting that self-attention layers might be applied to process sentence representations. However, the direct syntactic link is weak, and the primary focus of the sentence is on comparing different layer types rather than explicitly stating an application."
  },
  {
    "head": "self-attention layers",
    "head_type": "other",
    "tail": "machine translations",
    "tail_type": "task",
    "relation": "used_for",
    "confidence": "LOW",
    "section": "Why Self-Attention",
    "evidence": "In this section we compare various aspects of self-attention layers to the recurrent and convolutional layers commonly used for mapping one variable-length sequence of symbol representations (x 1,..., x n ) to another sequence of equal length (z 1,..., z n ), with x i, z i \u2208 R d, such as a hidden layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we consider three desiderata. One is the total computational complexity per layer. Another is the amount",
    "syntax": "no pattern",
    "reasoning": "The text mentions 'self-attention layers' and 'sequence transduction encoder or decoder' which is related to machine translation, but the direct link is not explicit. The phrase 'commonly used for mapping one variable-length sequence of symbol representations' suggests a task, but it's not explicitly stated as 'machine translation'."
  },
  {
    "head": "WMT 2014 English-German dataset",
    "head_type": "dataset",
    "tail": "sentence pairs",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Training Data and Batching",
    "evidence": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs.",
    "syntax": "via 'trained'; using 'on'",
    "reasoning": "The context states that the WMT 2014 English-German dataset was used for training, and this dataset consists of sentence pairs. While 'trained on' often implies 'used_for' when the tail is a task, here the tail is 'sentence pairs' which are the objects within the dataset being processed. Therefore, 'applied_to' is a plausible relation, though 'used_for' could also be argued if 'sentence pairs' is interpreted as the data being processed for a task."
  },
  {
    "head": "byte-pair encoding",
    "head_type": "other",
    "tail": "vocabulary",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Training Data and Batching",
    "evidence": "Sentences were encoded using byte-pair encoding[3], which has a shared sourcetarget vocabulary of about 37000 tokens.",
    "syntax": "via 'encoded'",
    "reasoning": "The text states that sentences were 'encoded using byte-pair encoding', and byte-pair encoding is a method that processes or creates a vocabulary. Therefore, byte-pair encoding is applied to the creation or processing of a vocabulary."
  },
  {
    "head": "byte-pair encoding",
    "head_type": "other",
    "tail": "Sentence pairs",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Training Data and Batching",
    "evidence": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding[3], which has a shared sourcetarget vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary[38]. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set ",
    "syntax": "no pattern",
    "reasoning": "The text states that 'Sentences were encoded using byte-pair encoding', indicating that byte-pair encoding is a method applied to sentence pairs for the purpose of encoding."
  },
  {
    "head": "byte-pair encoding",
    "head_type": "other",
    "tail": "sentence pairs",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Training Data and Batching",
    "evidence": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs. Sentences were encoded using byte-pair encoding[3], which has a shared sourcetarget vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT 2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece vocabulary[38]. Sentence pairs were batched together by approximate sequence length. Each training batch contained a set ",
    "syntax": "no pattern",
    "reasoning": "The text states 'Sentences were encoded using byte-pair encoding', indicating that byte-pair encoding (the head) is applied to sentence pairs (the tail) for processing."
  },
  {
    "head": "our base models",
    "head_type": "generic",
    "tail": "seconds",
    "tail_type": "metric",
    "relation": "evaluated_on",
    "confidence": "HIGH",
    "section": "Hardware and Schedule",
    "evidence": "For our base models using the hyperparameters described throughout the paper, each training step took about 0.4 seconds.",
    "syntax": "via 'described'; using 'For'",
    "reasoning": "The context states that the training step took a certain amount of time ('seconds'), which is a metric used to evaluate the performance of the 'base models'."
  },
  {
    "head": "the base models",
    "head_type": "generic",
    "tail": "steps",
    "tail_type": "metric",
    "relation": "evaluated_on",
    "confidence": "LOW",
    "section": "Hardware and Schedule",
    "evidence": "We trained the base models for a total of 100,000 steps or 12 hours.",
    "syntax": "via 'trained'",
    "reasoning": "The context mentions training for a number of 'steps', which can be interpreted as a metric for evaluation, but it's not a direct performance evaluation like accuracy or F1 score. The primary relation is about training duration rather than performance testing."
  },
  {
    "head": "the base models",
    "head_type": "generic",
    "tail": "hours",
    "tail_type": "metric",
    "relation": "evaluated_on",
    "confidence": "LOW",
    "section": "Hardware and Schedule",
    "evidence": "We trained the base models for a total of 100,000 steps or 12 hours.",
    "syntax": "via 'trained'; using 'for'",
    "reasoning": "The context mentions 'hours' in relation to training time, which could be interpreted as a metric for evaluation, but it's not a standard performance metric like accuracy or F1 score. The primary focus is on training duration rather than performance evaluation."
  },
  {
    "head": "Adam optimizer",
    "head_type": "method",
    "tail": "\u03b2 1",
    "tail_type": "metric",
    "relation": "evaluated_on",
    "confidence": "LOW",
    "section": "Optimizer",
    "evidence": "We used the Adam optimizer[20] with \u03b2 1 = 0.9, \u03b2 2 = 0.98 and \u03f5 = 10 -9.",
    "syntax": "via 'used'",
    "reasoning": "The context mentions the Adam optimizer and its parameters beta1, beta2, and epsilon. While beta1 is a metric, the relationship is not one of performance evaluation. The optimizer is simply configured with these metric values, not evaluated on them. Therefore, 'evaluated_on' is the closest fit, but with low confidence."
  },
  {
    "head": "Adam optimizer",
    "head_type": "method",
    "tail": "\u03b2 2",
    "tail_type": "metric",
    "relation": "evaluated_on",
    "confidence": "LOW",
    "section": "Optimizer",
    "evidence": "We used the Adam optimizer[20] with \u03b2 1 = 0.9, \u03b2 2 = 0.98 and \u03f5 = 10 -9.",
    "syntax": "via 'used'; using 'with'",
    "reasoning": "The context mentions 'Adam optimizer' and '\u03b2 2' which is a hyperparameter of the optimizer. While hyperparameters are often tuned and evaluated, the sentence does not explicitly state that \u03b2 2 is being used as a metric to evaluate the Adam optimizer's performance. It is more likely describing the configuration of the optimizer."
  },
  {
    "head": "Adam optimizer",
    "head_type": "method",
    "tail": "\u03f5",
    "tail_type": "metric",
    "relation": "evaluated_on",
    "confidence": "LOW",
    "section": "Optimizer",
    "evidence": "We used the Adam optimizer[20] with \u03b2 1 = 0.9, \u03b2 2 = 0.98 and \u03f5 = 10 -9.",
    "syntax": "via 'used'; using 'with'",
    "reasoning": "The context mentions 'Adam optimizer' and 'epsilon (\u03f5)' together, but epsilon is a hyperparameter of the Adam optimizer, not a metric it is evaluated on. The relation is weak and not a direct evaluation."
  },
  {
    "head": "regularization",
    "head_type": "other",
    "tail": "Residual Dropout",
    "tail_type": "method",
    "relation": "applied_to",
    "confidence": "MEDIUM",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized.",
    "syntax": "via 'employ'",
    "reasoning": "The context states 'We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer'. This indicates that Residual Dropout (a method) is applied to the output of sub-layers (an object/part of a larger system)."
  },
  {
    "head": "regularization",
    "head_type": "other",
    "tail": "sub-layer",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized.",
    "syntax": "via 'employ'; using 'to'",
    "reasoning": "The context states 'We apply dropout[33] to the output of each sub-layer', indicating that the regularization technique (dropout) is being applied to the sub-layer object."
  },
  {
    "head": "regularization",
    "head_type": "other",
    "tail": "sub-layer input",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized.",
    "syntax": "via 'employ'",
    "reasoning": "The context states 'We apply dropout... to the output of each sub-layer, before it is added to the sub-layer input'. This indicates that regularization (dropout) is being applied to the sub-layer input."
  },
  {
    "head": "Residual Dropout",
    "head_type": "method",
    "tail": "dropout",
    "tail_type": "other",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized.",
    "syntax": "via 'apply'",
    "reasoning": "The context states 'We apply dropout[33] to the output of each sub-layer', indicating that Residual Dropout (the head) is being applied to the concept of dropout (the tail) in the described process."
  },
  {
    "head": "Residual Dropout",
    "head_type": "method",
    "tail": "sub-layer",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized.",
    "syntax": "via 'apply'; using 'to'",
    "reasoning": "The context explicitly states 'We apply dropout ... to the output of each sub-layer', indicating that the method 'Residual Dropout' is applied to the object 'sub-layer'."
  },
  {
    "head": "Residual Dropout",
    "head_type": "method",
    "tail": "sub-layer input",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized.",
    "syntax": "via 'apply'",
    "reasoning": "The text explicitly states 'We apply dropout... to the output of each sub-layer, before it is added to the sub-layer input'. This indicates that the method (Residual Dropout, implied by 'dropout') is being applied to a specific object (sub-layer input)."
  },
  {
    "head": "Residual Dropout",
    "head_type": "method",
    "tail": "dropout",
    "tail_type": "other",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized.",
    "syntax": "via 'apply'",
    "reasoning": "The context states 'We apply dropout[33] to the output of each sub-layer', indicating that Residual Dropout (the head) is being applied to the concept of dropout (the tail) in the described process."
  },
  {
    "head": "Residual Dropout",
    "head_type": "method",
    "tail": "sums of the embeddings",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of P drop = 0.1.",
    "syntax": "no pattern",
    "reasoning": "The text explicitly states 'we apply dropout to the sums of the embeddings', indicating that the method (Residual Dropout) is applied to the object (sums of the embeddings)."
  },
  {
    "head": "dropout",
    "head_type": "other",
    "tail": "sub-layer",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized.",
    "syntax": "via 'apply'; using 'to'",
    "reasoning": "The context states 'We apply dropout[33] to the output of each sub-layer', indicating that the method 'dropout' is applied to the object 'sub-layer'."
  },
  {
    "head": "dropout",
    "head_type": "other",
    "tail": "sub-layer input",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized.",
    "syntax": "via 'apply'",
    "reasoning": "The text explicitly states 'We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized.' This indicates that dropout is being applied to the sub-layer input."
  },
  {
    "head": "dropout",
    "head_type": "other",
    "tail": "sums of the embeddings",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of P drop = 0.1.",
    "syntax": "no pattern",
    "reasoning": "The text explicitly states 'we apply dropout to the sums of the embeddings', indicating that the method 'dropout' is applied to the object 'sums of the embeddings'."
  },
  {
    "head": "dropout",
    "head_type": "other",
    "tail": "positional encodings",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of P drop = 0.1.",
    "syntax": "no pattern",
    "reasoning": "The text explicitly states 'we apply dropout to the sums of the embeddings and the positional encodings', indicating that dropout (OTHER) is being applied to positional encodings (OBJECT)."
  },
  {
    "head": "dropout",
    "head_type": "other",
    "tail": "sums of the embeddings",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of P drop = 0.1.",
    "syntax": "no pattern",
    "reasoning": "The text explicitly states 'we apply dropout to the sums of the embeddings', indicating that the method 'dropout' is applied to the object 'sums of the embeddings'."
  },
  {
    "head": "dropout",
    "head_type": "other",
    "tail": "positional encodings",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of P drop = 0.1.",
    "syntax": "no pattern",
    "reasoning": "The text explicitly states 'we apply dropout to the sums of the embeddings and the positional encodings', indicating that dropout (OTHER) is being applied to positional encodings (OBJECT)."
  },
  {
    "head": "dropout",
    "head_type": "other",
    "tail": "encoder",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of P drop = 0.1.",
    "syntax": "no pattern",
    "reasoning": "The text explicitly states 'we apply dropout [...] to the output of each sub-layer' and 'we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks'. This indicates that dropout (OTHER) is being applied to components within the encoder (OBJECT)."
  },
  {
    "head": "dropout",
    "head_type": "other",
    "tail": "decoder stacks",
    "tail_type": "object",
    "relation": "applied_to",
    "confidence": "HIGH",
    "section": "Regularization",
    "evidence": "We employ three types of regularization during training: Residual Dropout We apply dropout[33] to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks. For the base model, we use a rate of P drop = 0.1.",
    "syntax": "no pattern",
    "reasoning": "The text explicitly states 'we apply dropout to the output of each sub-layer' and 'we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks'. This indicates that dropout, an 'OTHER' entity in this context (a technique or regularization method), is being applied to specific components ('decoder stacks' being one of them) of a model."
  },
  {
    "head": "the model",
    "head_type": "generic",
    "tail": "accuracy",
    "tail_type": "metric",
    "relation": "evaluated_on",
    "confidence": "HIGH",
    "section": "Label Smoothing",
    "evidence": "This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.",
    "syntax": "via 'hurts'",
    "reasoning": "The context states that 'the model' improves 'accuracy', which indicates that accuracy is a metric used to evaluate the model's performance."
  },
  {
    "head": "the model",
    "head_type": "generic",
    "tail": "BLEU score",
    "tail_type": "metric",
    "relation": "evaluated_on",
    "confidence": "HIGH",
    "section": "Label Smoothing",
    "evidence": "This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.",
    "syntax": "via 'hurts'",
    "reasoning": "The context states that the model improves the BLEU score, which is a metric used to evaluate the performance of models, particularly in natural language generation tasks. The improvement in the BLEU score indicates that the model's performance is being measured and assessed using this metric."
  }
]